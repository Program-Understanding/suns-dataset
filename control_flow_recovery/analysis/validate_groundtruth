#!/usr/bin/env python3
"""
validate the groundtruth for a cfr file, or a folder of cfr files 
when the example uses "argc" as its source of non-determinism.

Currently, this script has a lot of limitations:
1. It only works with ELF binaries and assumes x86_64 architecture
3. Requires the use of pwndbg (https://github.com/pwndbg/pwndbg)
4. With the current implementation (6/18/25), assumes all questions are valid and well formatted
"""
import os
import re
import sys
import json
import subprocess
import argparse
import tempfile
import textwrap
import logging
from pathlib import Path

from elftools.elf.elffile import ELFFile
from elftools.common.exceptions import ELFError

# set up module-level logger
logger = logging.getLogger(__name__)


def find_cfr_files(root_dir):
    for dp, _, files in os.walk(root_dir):
        for fn in files:
            if fn.endswith('cfr.json'):
                yield os.path.join(dp, fn)


def extract_question_offset(question):
    m = re.findall(r"0x[0-9A-Fa-f]+", question) # there should only be one hex val in Q
    if not m:
        raise ValueError(f"No hex offset in question: {question!r}")
    return int(m[-1], 16)

def get_elf_virtual_address_for_offset(binary, file_offset):
    with open(binary, 'rb') as f:
        elf = ELFFile(f)
        sec = elf.get_section_by_name('.text')
        if not sec:
            raise RuntimeError(f".text missing in ELF: {binary}")
        section_offset = sec.header.sh_offset
        section_addr = sec.header.sh_addr
        section_size = sec.header.sh_size

        # Check if the file offset is within the section
        if section_offset <= file_offset < section_offset + section_size:
            # Calculate the virtual address
            virtual_address = section_addr + (file_offset - section_offset)
            return virtual_address
        else:
            raise ValueError(f"File offset {file_offset} is outside the .text section.")

def get_elf_text_info(binary):
    with open(binary, 'rb') as f:
        elf = ELFFile(f)
        sec = elf.get_section_by_name('.text')
        if not sec:
            raise RuntimeError(f".text missing in ELF: {binary}")
        return sec.header.sh_offset, sec.header.sh_addr


def get_runtime_text_base(binary, debug=False):
    cmd = [
        "pwndbg", "--batch", "--quiet", "--nx", binary,
        "-ex", "set disable-randomization on",
        "-ex", "info files"
    ]
    if debug:
        logger.debug(f"get_runtime_text_base: running: {' '.join(cmd)}")
    proc = subprocess.run(cmd, capture_output=True, text=True)
    if debug:
        logger.debug(f"info files stdout:\n{proc.stdout}")
        logger.debug(f"info files stderr:\n{proc.stderr}")
    if proc.returncode != 0:
        raise RuntimeError(f"GDB info files failed: {proc.stderr.strip()}")
    for line in proc.stdout.splitlines():
        m = re.match(r"\s*(0x[0-9A-Fa-f]+)\s*-\s*0x[0-9A-Fa-f]+\s*is\s*\.text", line)
        if m:
            return int(m.group(1), 16)
    raise RuntimeError(".text mapping not found in GDB info files")


def query_rax_with_gdb(binary: str, entrypoint: int, break_va: int, argc: int, debug=False) -> int | None:
    """
    Run the binary under Pwndbg, break at `break_va`, steps one instruction, returns RIP.
    """
    args_list = " ".join(str(i) for i in range(1, argc + 1)) or ""

    if entrypoint > 0x555555550000: # this is weird. some binaries need some time to "load"
        gdb_script = textwrap.dedent(f"""\
            set disable-randomization on
            set args {args_list}
            starti
            b *{entrypoint:#x}
            c
            b *{break_va:#x}
            while (1)
            c
            si
            print/x $rip
            end
        """)
    else:
        gdb_script = textwrap.dedent(f"""\
            set disable-randomization on
            set args {args_list}
            starti
            b *{break_va:#x}
            while (1)
            c
            si
            print/x $rip
            end
        """)

    with tempfile.NamedTemporaryFile("w", delete=False, suffix=".gdb") as tf:
        tf.write(gdb_script)
        script_path = Path(tf.name)

    gdb_cmd = [
        "pwndbg", "--batch", "--quiet", "--nx",
        "-x", str(script_path),
        binary,
    ]

    if debug:
        logger.debug("[gdb cmd] %s", " ".join(gdb_cmd))
        logger.debug("--- .gdb script ---\n%s\n-------------------", gdb_script)

    try:
        res = subprocess.run(
            gdb_cmd, capture_output=True, text=True#, check=True
        )
    except Exception as e:
        if debug:
            logger.debug("pwndbg crashed (most likely because the necessary branches were not taken)")
            logger.debug("Error:\n%s", e)
        return None
    finally:
        script_path.unlink(missing_ok=True)

    HEX_RE = re.compile(r"\$[0-9]+\s*=\s*0x([0-9a-fA-F]+)")
    m = HEX_RE.findall(res.stdout)
    if not m:
        if debug:
            logger.debug("no $N = 0x… line, raw gdb output:\n%s", res.stdout)
        return None

    return m


def validate_one(cfr_path, root_dir, max_args=53, debug=False):
    rel = os.path.relpath(cfr_path, root_dir)
    data = json.load(open(cfr_path))

    prog = data["program"]
    binary = os.path.join(os.path.dirname(cfr_path), prog)
    if not os.path.isfile(binary):
        print(f"{rel}: binary not found: {binary}", file=sys.stderr)
        return None, rel

    try:
        file_base, link_vaddr = get_elf_text_info(binary)
        if debug:
            logger.debug("ELF .text file_base=%s, link_vaddr=%s", hex(file_base), hex(link_vaddr))
        rt_base = get_runtime_text_base(binary, debug)
        if debug:
            logger.debug("runtime .text base=%s", hex(rt_base))
    except Exception as e:
        print(f"{rel}: skipped ({e})", file=sys.stderr)
        return None, rel

    file_off = extract_question_offset(data["question"])
    base = rt_base - 0x1040 # heuristic for load address
    if base < 0x400000:
        base = 0x555555554000
        break_va = base + file_off
    else:
        break_va = get_elf_virtual_address_for_offset(binary, file_off)
        base = link_vaddr - file_base
        
    if debug:
        logger.debug("JSON file_off=%s, break_va=%s", hex(file_off), hex(break_va))

    print(f"\n{rel}")
    print(f"  break VA: {hex(break_va)}")

    arg_map: dict[int, str] = {}
    for argc_count in range(0, max_args + 1):
        results = query_rax_with_gdb(binary, rt_base, break_va, argc_count, debug)
        if results is None:
            continue
        arg_map[argc_count] = []
        for match in results:
            rax = int(match, 16)
            fo = rax - base
            if hex(fo) not in arg_map[argc_count]:
                arg_map[argc_count].append(hex(fo))

    expected = set(data.get("groundtruth", []))
    found = set()
    for partial_found in arg_map.values():
        found.update(partial_found)
    if found == expected:
        print("  → OK")
    else:
        print("  → MISMATCH")
        print(f"    expected: {sorted(expected)}")
        print(f"         got: {sorted(found)}")

    return arg_map, rel


def main():
    p = argparse.ArgumentParser()
    p.add_argument("root", help="Path to a folder containing cfr files or a specific cfr file")
    p.add_argument("--max-args", type=int, default=30,
                   help="Maximum dummy argv count to test")
    p.add_argument("--debug", action="store_true",
                   help="Show detailed GDB commands and output")
    args = p.parse_args()

    logging.basicConfig(format="%(levelname)s: %(message)s",
                        level=logging.DEBUG if args.debug else logging.INFO)

    summary: dict[str, dict[int, str]] = {}

    
    if os.path.isdir(args.root):
        files = find_cfr_files(args.root)
    else:
        files = [args.root]

        
    for cfr in files:
        arg_map, rel = validate_one(cfr, os.path.dirname(cfr), max_args=args.max_args, debug=args.debug)
        if arg_map is not None:
            summary[rel] = arg_map

    # Print summary table
    if summary:
        print("\nSummary of args → targets:")
        print(f"{'Binary':<50} {'Argc':<5} {'Target':<30}")
        print('-' * 70)
        for rel, amap in summary.items():
            for argc, target_list in sorted(amap.items()):
                target = ", ".join(target_list)
                print(f"{rel:<50} {argc+1:<5} {target:<30}")


if __name__ == "__main__":
    main()

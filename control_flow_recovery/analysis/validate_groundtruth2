#!/usr/bin/env python3
from __future__ import annotations
import argparse, json, os, re, subprocess, sys, tempfile, logging, textwrap
from pathlib import Path
from typing import Iterable
from elftools.elf.elffile import ELFFile
from elftools.common.exceptions import ELFError

# ---------------------------------------------------------------------------
# Configuration & Logger                                                      
# ---------------------------------------------------------------------------
BASE_ADDR = 0x555555554000  # hard-coded runtime .text base
ENTRY_BP  = 0x555555555040  # first instruction after _start

logger = logging.getLogger(__name__)

# ---------------------------------------------------------------------------
# Regex Patterns                                                               
# ---------------------------------------------------------------------------
HEX_RE = re.compile(r"RUN_(\d+):(0x[0-9a-fA-F]+)")
OFF_RE = re.compile(r"0x[0-9A-Fa-f]+")

# ---------------------------------------------------------------------------
# File Discovery & ELF Helpers                                                
# ---------------------------------------------------------------------------
def walk_cfr_files(root: str) -> Iterable[Path]:
    for dp, _, fns in os.walk(root):
        for fn in fns:
            if fn.endswith("cfr.json"):
                yield Path(dp) / fn


def question_offset(q: str) -> int:
    m = OFF_RE.findall(q)
    if not m:
        raise ValueError(f"no hex offset in question: {q!r}")
    return int(m[-1], 16)


def elf_text_offsets(binary: Path) -> tuple[int, int]:
    with open(binary, "rb") as f:
        elf = ELFFile(f)
        sec = elf.get_section_by_name(".text")
        if not sec:
            raise RuntimeError(f".text missing in ELF: {binary}")
        return sec.header.sh_offset, sec.header.sh_addr

# ---------------------------------------------------------------------------
# GDB Interaction                                                              
# ---------------------------------------------------------------------------
def collect_rips(binary: Path, break_va: int, max_args: int, debug: bool = False) -> dict[int, int]:
    """
    Single pwndbg session, iterating through argc values:
      - disable randomization
      - for each argc: delete breakpoints, set args, starti, tbreak, continue, conditional si
      - print RUN_<argc>:0x<rip> only when breakpoint hit
    Returns mapping argc -> RIP.
    """
    # Build combined GDB script
def build_script():
    lines = [
        "set pagination off",
        "set confirm off",
        "set breakpoint pending on",
        "set disable-randomization on",
    ]
    for argc in range(0, max_args + 1):
        args_str = " ".join(map(str, range(1, argc + 1))) or "1"
        lines += [
            "delete breakpoints",
            f"set args {args_str}",
            "starti",
            f"tbreak *{break_va:#x}",
            "continue",
            f"if $pc == {break_va:#x}",
            "  si",
            f'  printf "RUN_{argc}:0x%lx\n", $rip',
            "end",
        ]
    return "\n".join(lines) + "\n"

    gdb_script = build_script()
    if debug:
        logger.debug("One-shot GDB script:\n%s", gdb_script)

    with tempfile.NamedTemporaryFile("w", delete=False, suffix=".gdb") as tf:
        tf.write(gdb_script)
        script_path = Path(tf.name)

    cmd = ["pwndbg", "--batch", "--quiet", "--nx", "-x", str(script_path), str(binary)]
    if debug:
        logger.debug("pwndbg cmd: %s", " ".join(cmd))

    res = subprocess.run(cmd, capture_output=True, text=True)
    script_path.unlink(missing_ok=True)

    # Parse output
    rip_map: dict[int, int] = {}
    for line in res.stdout.splitlines():
        m = HEX_RE.match(line)
        if not m:
            continue
        argc_str, rip_hex = m.groups()
        rip_map[int(argc_str)] = int(rip_hex, 16)

    return rip_map

# ---------------------------------------------------------------------------
# Validation Logic                                                            
# ---------------------------------------------------------------------------
def validate_one(cfr_path: Path, root: Path, max_args: int, debug: bool = False) -> tuple[dict[int,str], str] | tuple[None, str]:
    rel = str(cfr_path.relative_to(root))
    data = json.load(open(cfr_path))

    binary = cfr_path.parent / data["program"]
    if not binary.is_file():
        print(f"{rel}: binary not found: {binary}", file=sys.stderr)
        return None, rel

    try:
        elf_text_offsets(binary)
    except (RuntimeError, ELFError) as e:
        print(f"{rel}: skipped ({e})", file=sys.stderr)
        return None, rel

    file_off = question_offset(data["question"])
    break_va = BASE_ADDR + file_off
    if debug:
        logger.debug("%s → file_off=%s, break_va=%s", rel, hex(file_off), hex(break_va))

    rip_map = collect_rips(binary, break_va, max_args, debug)
    found = {hex(rip - BASE_ADDR) for rip in rip_map.values()}
    expected = set(data.get("groundtruth", []))

    print(f"\n{rel}")
    print(f"  break VA: {hex(break_va)}")
    if found == expected:
        print("  → OK")
    else:
        print("  → MISMATCH")
        print(f"    expected: {sorted(expected)}")
        print(f"         got: {sorted(found)}")

    arg_map = {argc: hex(rip - BASE_ADDR) for argc, rip in rip_map.items()}
    return arg_map, rel

# ---------------------------------------------------------------------------
# Entry Point & Summary                                                       
# ---------------------------------------------------------------------------
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("root", help="Directory containing the *-cfr.json files")
    parser.add_argument("--max-args", type=int, default=3, help="Upper bound on dummy argv count (default 3)")
    parser.add_argument("--debug", action="store_true", help="Enable debug logs")
    args = parser.parse_args()

    logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.DEBUG if args.debug else logging.INFO)

    summary: dict[str, dict[int,str]] = {}
    root = Path(args.root)
    for cfr in walk_cfr_files(str(root)):
        result = validate_one(cfr, root, args.max_args, args.debug)
        if result[0] is not None:
            arg_map, rel = result
            summary[rel] = arg_map

    if summary:
        print("\nSummary of args → targets:")
        print(f"{'Binary':<50} {'Argc':<5} {'Target':<12}")
        print('-' * 70)
        for rel, amap in summary.items():
            for argc, target in sorted(amap.items()):
                print(f"{rel:<50} {argc:<5} {target:<12}")

if __name__ == "__main__":
    main()

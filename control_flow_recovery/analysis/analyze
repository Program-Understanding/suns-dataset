#! /bin/bash

#Doing this without the use of these two globals became quite a pain, so I gave up
questions_for_tool=()
scripts_for_tool=()
log_processing_scripts_for_tool=()
only_tool="*all*"
only_cfr="!all!"
timeout="60"
tools_directory="./tools"

function show_help {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --only_tool TOOL    Specify a tool to run (default is all)."
    echo "  --only_cfr CFR      Specify a cfr to analyze (default is all)."
    echo "     CFR is either path, filename, or filename without '-cfr.json' "
    echo "     CFR can also be '*foo*' matching any file containing foo"
    echo "  --timeout TIME      Specify a timeout in seconds for each test (default is 60)."
    echo "  --tools_directory DIR  Specify the tools directory if not at ./tools"
    echo "  --help          Display this help message."
    
}


dont_run_based_on_version() {
    local version1=$1 #the tool version
    local version2=$2 #the result version

    # Split the version numbers into arrays
    IFS='.' read -r -a v1 <<< "$version1"
    IFS='.' read -r -a v2 <<< "$version2"

    # Compare each component
    for i in {0..2}; do
        # If one version has fewer components, treat missing components as 0
        local v1_component=${v1[i]:-0}
        local v2_component=${v2[i]:-0}

        if (( v1_component > v2_component )); then
            return 1  # tool version is greater
        elif (( v1_component < v2_component )); then
            return 0  # likely won't occur, result version is bigger than tool version
        fi
    done
    return 0  # versions are equal, so don't run
}



start_tool() {
    local tool=$1
    
    # Check if the tool should use Docker or not
    if [ -f "$tools_directory/$tool/.nodocker" ]; then
        echo "Tool $tool does not use Docker"
        return
    fi
    
    docker stop "running-$tool-tool" 2> /dev/null
    docker rm "running-$tool-tool" 2> /dev/null
    docker create --name "running-$tool-tool" "$tool-tool" > /dev/null
    docker start "running-$tool-tool" > /dev/null
}

stop_tool() {
    local tool=$1
    
    # Check if the tool should use Docker or not
    if [ -f "$tools_directory/$tool/.nodocker" ]; then
        return
    fi
    
    docker stop "running-$tool-tool" 2> /dev/null
    docker rm "running-$tool-tool" 2> /dev/null
}

process_cfr_file() {
    local json_file="$1"  # Get the first argument passed to the function
    local tool="$2"
    local SCRIPT="$3"
    local tooldir="$4" 
    local LOG_PROCESSING_SCRIPT="$5"
    
    echo "    processing $json_file using tool $tool"

    CFR_JSON_PATH=$(dirname "$json_file")
    CFR_JSON_FILENAME=$(basename "$json_file")
    BINARY_TO_ANALYZE_PATH=$(dirname "$json_file")
    BINARY_TO_ANALYZE_FILENAME=$(jq -r '.program' $json_file)

    # Use binary expansion to allow scripts to use the predefined environment variables
    SCRIPT="${SCRIPT//\$BINARY_TO_ANALYZE_FILENAME/$BINARY_TO_ANALYZE_FILENAME}"
    SCRIPT="${SCRIPT//\$BINARY_TO_ANALYZE_PATH/$BINARY_TO_ANALYZE_PATH}"
    SCRIPT="${SCRIPT//\$CFR_JSON_PATH/$CFR_JSON_PATH}"
    SCRIPT="${SCRIPT//\$CFR_JSON_FILENAME/$CFR_JSON_FILENAME}"

    echo "    The script is:$SCRIPT"
    
    # Create results directory if it doesn't exist
    RPATH="${CFR_JSON_PATH/../results}"
    if [ ! -d "$RPATH" ]; then
        mkdir -p "$RPATH"
    fi

    CFR_MODIFIED="${CFR_JSON_FILENAME/cfr.json/-$tool}"
    
    LOGFILE="$RPATH/$CFR_MODIFIED-log"
    RESULTFILE="$RPATH/$CFR_MODIFIED-results"
    
    # Check if the tool should use Docker or not
    if [ -f "$tooldir/.nodocker" ]; then
        echo "[DEBUG]: Detected .nodocker"
        # For non-Docker tools, run the script directly

        # Some tools (like binja-xrefs) require a specific Python environment
        PYTHON_ENV=$(cat "$tooldir/.nodocker")

        # Create a temporary working directory
        TEMP_DIR=$(mktemp -d)
	echo $TEMP_DIR
        
        # Copy necessary files to the temp directory
	if [ -f "$tooldir/script.sh" ]; then	    
            cp "$tooldir/script.sh" "$TEMP_DIR/" # TODO:
	fi
	if [ -f "$tooldir/study.py" ]; then	    
            cp "$tooldir/study.py" "$TEMP_DIR/" # TODO:
	fi
        cp "$BINARY_TO_ANALYZE_PATH/$BINARY_TO_ANALYZE_FILENAME" "$TEMP_DIR/$BINARY_TO_ANALYZE_FILENAME"
        cp "$json_file" "$TEMP_DIR/$CFR_JSON_FILENAME"
        
        # If there's a Python environment specified, use it
        if [ -n "$PYTHON_ENV" ] && [ "$PYTHON_ENV" != "true" ]; then
	    start=`date +%s`
            (cd "$TEMP_DIR" && source "$PYTHON_ENV" && timeout "$timeout" eval "$SCRIPT") > $LOGFILE 2>&1
	    result_code="$?"
	    end=`date +%s`
	    runtime=$((end-start))
        else
            # Otherwise just run normally
	    start=`date +%s`
	    # TODO: timeouts don't work for IDA for some reason
            (cd "$TEMP_DIR" && timeout $timeout $SCRIPT) > $LOGFILE 2>&1
	    result_code="$?"
	    end=`date +%s`
	    runtime=$((end-start))
        fi

        # Clean up
        #rm -rf "$TEMP_DIR"
    else
        # For Docker tools, use Docker to run the script
        docker cp "$BINARY_TO_ANALYZE_PATH/$BINARY_TO_ANALYZE_FILENAME" "running-$tool-tool:/control-flow-recovery/$BINARY_TO_ANALYZE_FILENAME"
        docker cp "$json_file" "running-$tool-tool:/control-flow-recovery/$CFR_JSON_FILENAME"
        
        #docker exec "running-$tool-tool" /bin/bash -c "$SCRIPT" > $LOGFILE 2>&1
	start=`date +%s`
	timeout "$timeout" docker exec "running-$tool-tool" /bin/bash -c "$SCRIPT" > $LOGFILE 2>&1
	result_code="$?"
	end=`date +%s`
	runtime=$((end-start))
        
        # Clean up docker files
        docker exec "running-$tool-tool" /bin/bash -c "rm $BINARY_TO_ANALYZE_FILENAME" 
        docker exec "running-$tool-tool" /bin/bash -c "rm $CFR_JSON_FILENAME"
    fi

    # Process log file
    
    # replace tooldir/logfile argument in log script
    LOG_PROCESSING_SCRIPT="${LOG_PROCESSING_SCRIPT//\$BINARY_TO_ANALYZE_FILENAME/$BINARY_TO_ANALYZE_PATH\/$BINARY_TO_ANALYZE_FILENAME}"
    LOG_PROCESSING_SCRIPT="${LOG_PROCESSING_SCRIPT//\$BINARY_TO_ANALYZE_PATH/$BINARY_TO_ANALYZE_PATH}"
    LOG_PROCESSING_SCRIPT="${LOG_PROCESSING_SCRIPT//\$CFR_JSON_PATH/$CFR_JSON_PATH}"
    LOG_PROCESSING_SCRIPT="${LOG_PROCESSING_SCRIPT//\$CFR_JSON_FILENAME/$json_file}"
    LOG_PROCESSING_SCRIPT="${LOG_PROCESSING_SCRIPT//\$LOG_FILENAME/$LOGFILE}"
    LOG_PROCESSING_SCRIPT="${LOG_PROCESSING_SCRIPT//\$TOOL_DIR/$tooldir}"

    # run log processing, if it exists
    if [ "$result_code" -eq 124 ]; then
	echo "RESULTS: Timeout ($timeout seconds)" >> $RESULTFILE
    else
	if [[ "$LOG_PROCESSING_SCRIPT" == "null" ]]; then
	    #if not just search the log file
	    grep "RESULTS:" $LOGFILE > $RESULTFILE
	    #echo "side 1"
	else
	    $LOG_PROCESSING_SCRIPT > $RESULTFILE
	    #echo "side 2"
	fi
	echo "RESULTS: Running time: $runtime seconds" >> $RESULTFILE
    fi

    version=$(jq -r '.version' "$tooldir/questions.json" )

    echo "RESULTS: Tool name:$tool" >> $RESULTFILE
    echo "RESULTS: Tool version:$version" >> $RESULTFILE
    echo "RESULTS:      (not the version of the underlying tool, but of the script that invokes it)" >> $RESULTFILE
    echo "RESULTS:      (see the tool itself to find which underlying tools it uses and their versions)" >> $RESULTFILE
}

get_questions_for_tool() {
    #these special keywords can appear in questions, e.g., $INSTRUCTION or $OFFSET
    local INSTRUCTION="(.*)"
    local OFFSET="(0[xX][0-9a-fA-F]+|[0-9]+)"
    
    # Use jq to extract the questions and read them into the array
    local json_data=$(<$1/questions.json)
    # Initialize an empty array
    local questions=()

    # Use jq to extract the questions and read them into the array
    while IFS= read -r question; do
        questions+=("$question")
    done < <(echo "$json_data" | jq -r '.questions[].question')

    questions_for_tool=() #clear the global

    for question in "${questions[@]}"; do
        local transformed_question="${question//\$INSTRUCTION/$INSTRUCTION}"
        local transformed_question="${transformed_question//\$OFFSET/$OFFSET}"
        questions_for_tool+=("$transformed_question")
    done
}

get_version_for_result() {
    local filepath="$1"
    local version="0.0.0"

    # Check if the file exists
    if [[ ! -f "$filepath" ]]; then
        echo "File not found: $filepath"
        return 1
    fi

    # Read the file line by line
    while IFS= read -r line; do
        # Check if the line matches the pattern
        if [[ $line =~ RESULTS:\ Tool\ version:([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            version="${BASH_REMATCH[1]}"  # Extract the version number
            break  # Exit the loop once the version is found
        fi
    done < "$filepath"

    # Return the version or "0.0.0" if not found
    echo "$version"
}

get_scripts_for_tool() {
    #transformations on scripts happen when we read the cfr file
    json_data=$(<$1/questions.json)
    # Initialize an empty array
    scripts=()
    log_processing_scripts=()
    # Use jq to extract the scripts and read them into the array
    while IFS= read -r script; do
        scripts+=("$script")
    done < <(echo "$json_data" | jq -r '.questions[].script')
    while IFS= read -r script; do
        log_processing_scripts+=("$script")
    done < <(echo "$json_data" | jq -r '.questions[].processLogScript')

    scripts_for_tool=() #clear the global
    log_processing_scripts_for_tool=() #clear the global

    for script in "${scripts[@]}"; do
        scripts_for_tool+=("$script")
    done
    for script in "${log_processing_scripts[@]}"; do
        log_processing_scripts_for_tool+=("$script")
    done
}

filter_cfr_files() {
    local input_list="$1"
    local filtered_list=""

    # Iterate over each line in the input list
    while IFS= read -r line; do

        if [[ $only_cfr == "!all!" ]]; then
            filtered_list+="$line"$'\n'
            continue
        fi
        
        #user specified a wildcard search
        if [[ "$only_cfr" == \** && "$only_cfr" == *\* ]]; then
            
            if [[ "$line" == $only_cfr ]] ; then
                filtered_list+="$line"$'\n'
            fi
            continue
        fi

        #user is specifying a path
        if [[ "$only_cfr" == *"/"* ]]; then
            #if user specified a path, match exact
            if [[ "$line" == "$only_cfr" ]]; then
                filtered_list+="$line"$'\n'
                continue
            fi
            continue
        fi

        #user specified a file without the folder information
        if [[ $(basename "$line") == "$only_cfr" ]]; then
            filtered_list+="$line"$'\n'
            continue
        fi

        #user specified a file without folder and without -cfr.json
        if [[ $(basename "$line") == "$only_cfr-cfr.json" ]]; then
            filtered_list+="$line"$'\n'
            continue
        fi

    done <<< "$input_list"

    # Remove the trailing newline character
    filtered_list="${filtered_list%$'\n'}"

    echo "$filtered_list"
}

#process command line arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        --only_tool)
            if [[ -n "$2" && ! "$2" =~ ^-- ]]; then
                only_tool="$2"
                shift 2
            else
                echo "Error: --only_tool requires a tool name."
                exit 1
            fi
            ;;
        --timeout)
            if [[ -n "$2" && "$2" =~ ^-?[0-9]+$ ]]; then
                timeout="$2"
                shift 2
            else
                echo "Error: --timeout requires a number."
                exit 1
            fi
            ;;
        --only_cfr)
            if [[ -n "$2" && ! "$2" =~ ^-- ]]; then
                only_cfr="$2"
                shift 2
            else
                echo "Error: --only_cfr requires a cfr file specification."
                exit 1
            fi
            ;;
        --tools_directory)
            if [[ -n "$2" && ! "$2" =~ ^-- ]]; then
                tools_directory="$2"
		if [ ! -d "$tools_directory" ]; then
                    echo "Error: --tools_directory requires a directory specification."
		    exit 1
		fi
                shift 2
            else
                echo "Error: --tools_directory requires a directory specification."
                exit 1
            fi
            ;;
        --help)
            show_help
            exit 0
            ;;
        --*)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)
            echo "Analyze takes options, but no positional arguments such as: $1"
            show_help
            exit 1
            ;;
    esac
done

echo "This is a proof of concept script that runs analysis tools"
echo "Docker containers will be used unless a .nodocker file is found in the tool directory"

#for efficiency reasons, we try to apply each tool to each dataset
find $tools_directory/*  -maxdepth 0 -type d | while read -r tooldir; do
    echo "found a tool directory: $tooldir"
    #extract the name of the tool from the tooldir
    tool="${tooldir##*/}"

    if [ -f $tooldir/.ignoreme ]; then
        echo "Ignoring this directory (there is a .ignoreme file in $tooldir)"
        continue
    fi
    
    version=$(jq -r '.version' "$tooldir/questions.json" )

    if [[ $only_tool != "*all*" && $tool != "$only_tool" ]]; then
        continue
    fi
    
    # Check if the tool uses Docker or not
    if [ -f "$tooldir/.nodocker" ]; then
        echo "Tool $tool will run natively (without Docker)"
    else
        echo "Tool $tool will run in Docker"
    fi

    get_questions_for_tool "$tooldir"
    get_scripts_for_tool "$tooldir"

    #start the tool (if it uses Docker)
    start_tool $tool
    
    #iterate over the datasets
    find .. -type d | while read -r dir; do
        if [ "$dir" == "../analysis" ]; then
            continue #skip the analysis directory
        fi

        if [[ "$dir" == ../analysis/* ]]; then
            continue #skip all of the subdirectories in analysis
        fi

        cfr_json_files=$(find "$dir" -maxdepth 1 -type f -name "*cfr.json")
        cfr_json_files=$(filter_cfr_files "$cfr_json_files")
        if [ -n "$cfr_json_files" ]; then
            echo "$cfr_json_files" | while read -r cfr_json_file; do

                #skip cfr_json_file if we have results for a tool version greater than
                #the version that we have.

                CFR_JSON_PATH=$(dirname "$cfr_json_file")
                CFR_JSON_FILENAME=$(basename "$cfr_json_file")
                RPATH="${CFR_JSON_PATH/../results}"
                CFR_MODIFIED="${CFR_JSON_FILENAME/cfr.json/-$tool}"
                existing_resultfile="./$RPATH/$CFR_MODIFIED-results"    
                
                if [[ -f "$existing_resultfile" ]]; then
                    existing_version=$(get_version_for_result "$existing_resultfile")
                    if dont_run_based_on_version "$version" "$existing_version"; then
                        echo "skipping analysis because we have a recent result for $CFR_JSON_FILENAME"
                        continue
                    fi
                fi

		echo "Tool is $tool version is $version existing_version is $existing_version"
                echo "fetching question from $cfr_json_file"
                cfr_question=$(jq -r '.question' "$cfr_json_file" )

                length=${#questions_for_tool[@]}
                for (( i=0; i<length; i++ )); do
                    question=${questions_for_tool[i]}
                    if [[ $cfr_question =~ $question ]]; then
                        script=${scripts_for_tool[i]}
                        log_script=${log_processing_scripts_for_tool[i]}
                        process_cfr_file "$cfr_json_file" "$tool" "$script" "$tooldir" "$log_script"
                    fi
                done
            done
        fi
    done

    stop_tool $tool

done

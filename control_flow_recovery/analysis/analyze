#! /bin/bash
echo "This is a proof of concept script that runs a docker container that we feed our example to"
echo "You must build the container separate from running the analyses"

#Doing this without the use of these two globals became quite a pain
questions_for_tool=()
scripts_for_tool=()

start_tool() {

    #e.g.,
    #docker stop running-ghidra-xrefs-tool
    #docker rm running-ghidra-xrefs-tool
    #docker create --name running-ghidra-xrefs-tool ghidra-xrefs-tool
    #docker ps -a | grep running-ghidra-xrefs-tool
    #docker start running-ghidra-xrefs-tool
    
    local tool=$1
    docker stop "running-$tool-tool"
    docker rm "running-$tool-tool"
    docker create --name "running-$tool-tool" "$tool-tool"
    docker ps -a | grep "running-$tool-tool"
    docker start "running-$tool-tool"
}

stop_tool() {
    docker stop "running-$tool-tool"
    docker rm "running-$tool-tool"
}

process_cfr_file() {

    local json_file="$1"  # Get the first argument passed to the function
    local tool="$2"
    local SCRIPT="$3"
    local tooldir="$4" #not needed yet, but might be?
    
    echo "this is the file to process:$json_file"
    echo "this is the tool:$tool"
    echo "this is the script before any substitutions:$SCRIPT"

    #TODOconsider having only a single parent directory???
    CFR_JSON_PATH=$(dirname "$json_file")
    CFR_JSON_FILENAME=$(basename "$json_file")
    BINARY_TO_ANALYZE_PATH=$(dirname "$json_file")
    BINARY_TO_ANALYZE_FILENAME=$(jq -r '.program' $json_file)


    #we use "-r" because we don't want the double blackslash that we had to have in our JSON to get a backslash
    #we should look for the <tool>-cfrs.json file
    #SCRIPT=$(jq -r '.script' $CFR_JSON_PATH/$CFR_JSON_FILENAME )

    #assuming there is no "crfs" file, then we use the script associated with the question
    #if [ "$SCRIPT" = "null" ]; then
	#echo "no script found"
	#SCRIPT= "script": "/ghidra/ghidra_11.2_PUBLIC/support/analyzeHeadless /control-flow-recovery project -import $BINARY_TO_ANALYZE_FILENAME -scriptPath /control-flow-recovery -postscript ReportXrefs.java $CFR_JSON_FILENAME -overwrite",

    #fi
    
    #use binary expansion to allow scripts to use the predefined environment variables

    SCRIPT="${SCRIPT//\$BINARY_TO_ANALYZE_FILENAME/$BINARY_TO_ANALYZE_FILENAME}"
    SCRIPT="${SCRIPT//\$BINARY_TO_ANALYZE_PATH/$BINARY_TO_ANALYZE_PATH}"
    SCRIPT="${SCRIPT//\$CFR_JSON_PATH/$CFR_JSON_PATH}"
    SCRIPT="${SCRIPT//\$CFR_JSON_FILENAME/$CFR_JSON_FILENAME}"

    echo "The script is:$SCRIPT"
    
    docker cp "$BINARY_TO_ANALYZE_PATH/$BINARY_TO_ANALYZE_FILENAME" "running-$tool-tool:/control-flow-recovery/$BINARY_TO_ANALYZE_FILENAME"
    docker cp "$json_file" "running-$tool-tool:/control-flow-recovery/$CFR_JSON_FILENAME"

    docker ps -a | grep "running-$tool-tool"

    docker exec "running-$tool-tool" /bin/bash -c "ls"

    LOGFILE="$(basename $CFR_JSON_PATH)-log"
    RESULTFILE="$(basename $CFR_JSON_PATH)-results"
    
    docker exec "running-$tool-tool" /bin/bash -c "$SCRIPT" > results/$LOGFILE

    #now search the log file
    grep "RESULTS:" results/$LOGFILE > results/$RESULTFILE
    
    docker exec "running-$tool-tool" /bin/bash -c "rm $BINARY_TO_ANALYZE_FILENAME"
    docker exec "running-$tool-tool" /bin/bash -c "rm $CFR_JSON_FILENAME"
    docker exec "running-$tool-tool" /bin/bash -c "ls"

}

get_questions_for_tool() {
    #these special keywords can appear in questions, e.g., $INSTRUCTION or $OFFSET
    local INSTRUCTION="(.*)"
    local OFFSET="(0[xX][0-9a-fA-F]+|[0-9]+)"
    #echo "Here is our argument:$1"
    # Use jq to extract the questions and read them into the array

    local json_data=$(<$1/questions.json)
    # Initialize an empty array
    local questions=()

    # Use jq to extract the questions and read them into the array
    while IFS= read -r question; do
	questions+=("$question")
    done < <(echo "$json_data" | jq -r '.questions[].question')

    # Print the length of the array
    #length=${#questions[@]}
    #echo "Length of the array: $length"

    questions_for_tool=() #clear the global

    for question in "${questions[@]}"; do

	local transformed_question="${question//\$INSTRUCTION/$INSTRUCTION}"
	local transformed_question="${transformed_question//\$OFFSET/$OFFSET}"
	echo "here is the transformed question:$transformed_question"
	questions_for_tool+=("$transformed_question")
    done

}


get_scripts_for_tool() {
    #transformations on scripts happen when we read the cfr file
    json_data=$(<$1/questions.json)
    # Initialize an empty array
    scripts=()
    # Use jq to extract the scripts and read them into the array
    while IFS= read -r script; do
	scripts+=("$script")
    done < <(echo "$json_data" | jq -r '.questions[].script')

    for script in "${scripts[@]}"; do
	echo "here is the script:$script"
        scripts_for_tool+=("$script")
    done

}


#for efficiency reasons, we try to apply each tool to each dataset
find ./tools/* -type d | while read -r tooldir; do
    echo "found a tool directory: $tooldir"


    #get_questions_for_tool "$tooldir"
    #exit 1

    get_questions_for_tool "$tooldir"
    echo "There are ${#questions_for_tool[@]} questions"
    get_scripts_for_tool "$tooldir"
    echo "There are ${#scripts_for_tool[@]} scripts"
    #extract the name of the tool from the tooldir
    tool="${tooldir##*/}"
    echo "here is the name of the tool:$tool"
    #start the tool

    start_tool $tool
    
    #iterate over the datasets

    find .. -type d | while read -r dir; do
    	echo "processing directory: $dir"
    	cfr_json_files=$(find "$dir" -maxdepth 1 -type f -name "*cfr.json")
	echo "Here are the json files: $cfr_json_files"
	if [ -n "$cfr_json_files" ]; then
	    echo "$cfr_json_files" | while read -r cfr_json_file; do
		echo "fetching question from $cfr_json_file"
		cfr_question=$(jq -r '.question' "$cfr_json_file" )
		echo "here is the question:$cfr_question"
		length=${#questions_for_tool[@]}
		echo "There are $length questions to compare against"
		for (( i=0; i<length; i++ )); do
		    question=${questions_for_tool[i]}
		    echo "here is the regex #$i we are comparing to:$question"
		    if [[ $cfr_question =~ $question ]]; then
			echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Found a file to process: $cfr_json_file"
			script=${scripts_for_tool[i]}
			#probably we send the name of the tool to the process command??>
			#TODO...do we passs the tooldir or the tool name?
			process_cfr_file "$cfr_json_file" "$tool" "$script" "$tooldir"
		    fi
		done
	    done
	fi
    done

    stop_tool $dir

done


